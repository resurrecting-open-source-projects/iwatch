#!/usr/bin/perl
# iWatch
# By Cahya Wirawan <cahya at gmx dot at>
# Usage: iwatch [-c <configfile.xml>] [-v] [-d]
# iWatch monitor any changes in directories/files specified
# in the configuration file, and send email alert.
# This program needs inotify in linux kernel >= 2.6.13  

use strict;
use Getopt::Std;
use Event;
use Linux::Inotify2;
use File::Find ();
use Mail::Sendmail;
use Sys::Hostname;
use XML::Simple;
use POSIX;
use String::Format;
#use Data::Dumper;

my $PROGRAM = "iWatch";
my $VERSION = "0.0.4";
my $DEBUG = 0;
my $CONFIGFILE = "/etc/iwatch.xml";
my %WatchList;
my %Mail;
my %Events;
my $Filename;
sub wanted;
sub mywatch;
sub pathwatch;

my %options=();
my %formats = (
  'p' => $PROGRAM,
  'v' => $VERSION,
  'd' => sub { POSIX::strftime($_[0], localtime) },
  'f' => sub { $Filename }
);
my %InotifyEvents = (
  'access' => IN_ACCESS,
  'modify' => IN_MODIFY,
  'attrib' => IN_ATTRIB,
  'close_write' => IN_CLOSE_WRITE,
  'close_nowrite' => IN_CLOSE_NOWRITE,
  'open' => IN_OPEN,
  'moved_from' => IN_MOVED_FROM,
  'moved_to' => IN_MOVED_TO,
  'create' => IN_CREATE,
  'delete' => IN_DELETE,
  'delete_self' => IN_DELETE_SELF,
  'move_self' => IN_MOVE_SELF,
  'unmount' => IN_UNMOUNT,
  'q_overflow' => IN_Q_OVERFLOW,
  'ignored' => IN_IGNORED,
  'close' => IN_CLOSE,
  'move' => IN_MOVE,
  'isdir' => IN_ISDIR,
  'oneshot' => IN_ONESHOT,
  'all_events' => IN_ALL_EVENTS,
  'default' => IN_CLOSE_WRITE|IN_CREATE|IN_DELETE|IN_MOVE|IN_DELETE_SELF|IN_MOVE_SELF,
);

getopts("c:dv",\%options);

$CONFIGFILE = $options{c} if defined $options{c};
$DEBUG = 1 if defined $options{v};
delete @ENV{qw(ENV IFS CDPATH)};
$ENV{PATH} = "/bin:/usr/bin:/usr/sbin";

my $config = XMLin($CONFIGFILE, ForceArray => ['path','watchlist']);

if(defined $options{d}) {
  my $ChildPid = fork;
  die "cannot fork: $!\n" if(!defined $ChildPid);
  exit if($ChildPid);

  POSIX::setsid() or die "Can't start a new session: $!";
  open STDIN, "</dev/null";
  open STDOUT, ">/dev/null";
  open STDERR, ">&STDOUT";
  umask 0;
  chdir "/";
}

my $inotify = new Linux::Inotify2;
Event->io (fd => $inotify->fileno, poll => 'r', cb => sub { $inotify->poll });

foreach my $watchpoint (@{$config->{watchlist}}) {
  foreach my $path (@{$watchpoint->{path}}) {
    $WatchList{$path->{type}}{$path->{content}}{"contactpoint"} = $watchpoint->{contactpoint}->{email};
    $WatchList{$path->{type}}{$path->{content}}{"exec"} = $path->{exec} if(defined($path->{exec}));
    $WatchList{$path->{type}}{$path->{content}}{"alert"} = 
      (defined($path->{alert}) && $path->{alert} eq "off") ? 0:1;

    print "$path->{content} : $watchpoint->{contactpoint}->{email}\n" if($DEBUG);
    our $mask;
    $mask = ($path->{type} eq "recursive") ? $InotifyEvents{'create'} : 0;
    if(!defined($path->{'events'})) {
      $mask = $InotifyEvents{'default'}; 
    }
    else {
      foreach my $event ( split(',',$path->{'events'})) {
        $event =~ s/\s//g;
        warn "Event $event doesn't not exist!" if (!defined($InotifyEvents{$event}));
        $mask = $mask | $InotifyEvents{$event};
      }
    }
    $WatchList{$path->{type}}{$path->{content}}{"mask"} = $mask;
    pathwatch($path->{type},$path->{content},$mask);
  }
}

$Mail{From} = $config->{guard}->{email};

Event::loop;

sub pathwatch {
  our $mask;
  my ($mode,$path) = @_;
  if(-e "$path") {
    if($mode eq "single") {
      print "Watch $path\n" if($DEBUG);
      $inotify->watch ("$path", $mask, \&mywatch);
    }
    elsif($mode eq "recursive") {
      File::Find::find({wanted => \&wanted}, "$path");
    }
  }
}

sub wanted {
  our $mask;
  if(-d $File::Find::name) {
    print "Watch $File::Find::name\n" if($DEBUG);
    $inotify->watch ("$File::Find::name", $mask, \&mywatch);
  }
}

sub getWatchList {
  my ($path) = @_;
  print "Path: $path\n" if($DEBUG);
  return undef if($WatchList{"exception"}{$path});
  foreach my $key (keys %{$WatchList{"exception"}}) {
    return undef if("$path" =~ /^$key/);
  }
  return $WatchList{"single"}{$path} if(defined $WatchList{"single"}{$path});
  return $WatchList{"recursive"}{$path} if(defined $WatchList{"recursive"}{$path});
  foreach my $key (keys %{$WatchList{"recursive"}}) {
    return $WatchList{"recursive"}{$key} if($path =~ /^$key/);
  }
  return undef;
}

sub mywatch {
  my $e = shift;
  $Filename = $e->fullname;
  printf ("events for <%s> received: %x\n", $Filename, $e->mask) if($DEBUG);
  return if(defined $WatchList{"exception"}{$Filename});
  my $Path = getWatchList($e->{w}->{name});
  return if(!defined($Path));
  undef $Mail{Message};
  if($e->IN_CREATE && -d $Filename) {
    print "Dir $Filename is watched\n" if($DEBUG);
    $inotify->watch ($Filename, $Path->{'mask'}, \&mywatch);
  }
  elsif($e->IN_CLOSE_WRITE && -f $Filename) {
    my $Message = "$PROGRAM: $Filename";
    $Mail{Message} = $Message;
    $Mail{Subject} = "$PROGRAM:" . hostname() . ":Change:$Filename";  
    print "to: $Path->{'contactpoint'} : $Message\n" if($DEBUG);
  }
  elsif($e->IN_DELETE) {
    my $Message = "";
    $Mail{Message} = $Message;
    $Mail{Subject} = "$PROGRAM:" . hostname() . ":Delete:$Filename";
    print "to: $Path->{'contactpoint'} : $Message\n" if($DEBUG);
  }
  elsif($e->IN_MOVED_FROM || $e->IN_MOVED_TO) {
    if($e->IN_MOVED_FROM) {
      $Events{$e->{cookie}} = "$Filename";
    }
    elsif($e->IN_MOVED_TO) {
      my $FileMove = $Events{$e->{cookie}} . ":$Filename";
      $Mail{Message} = "$PROGRAM:$FileMove";
      $Mail{Subject} = "$PROGRAM:" . hostname() . ":Move:$FileMove";
      print "to: $Path->{'contactpoint'} : Move from " . $Events{$e->{cookie}} . " to $Filename\n" if($DEBUG);
      undef $Events{$e->{cookie}};
    }
  }
  elsif($e->IN_DELETE_SELF && -f $Filename && defined $WatchList{$Filename}) {
    print "rewatch: $Filename\n" if($DEBUG);
    my $Message = "$PROGRAM: $Filename";
    $Mail{Message} = $Message;
    $Mail{Subject} = "$PROGRAM:" . hostname() . ":Replaced:$Filename";
    $inotify->watch ("$Filename", $Path->{'mask'}, \&mywatch);
    print "to: $Path->{'contactpoint'} : $Message\n" if($DEBUG);
  }
  if(defined($Path->{exec})) {
    my $command = stringf("$Path->{exec}",%formats);
    print "Command: $command\n" if($DEBUG);
    system ("$command");
  }
  if(defined($Mail{Message}) && $Path->{'alert'}) {
    $Mail{To} = $Path->{'contactpoint'};
    sendmail(%Mail) or warn $Mail::Sendmail::error;
  }
};

