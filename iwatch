#!/usr/bin/perl
# iWatch version 0.0.3
# By Cahya Wirawan <cahya at gmx dot at>
# Usage: iwatch [-c <configfile.xml>] [-v]
# iWatch monitor any changes in directories/files specified
# in the configuration file, and send email alert.
# This program needs inotify in linux kernel >= 2.6.13  

use strict;
use Getopt::Std;
use Event;
use Linux::Inotify2;
use File::Find ();
use Mail::Sendmail;
use Sys::Hostname;
use XML::Simple;
#use Data::Dumper;

my $DEBUG = 0;
my $CONFIGFILE = "/etc/iwatch.xml";
my $WATCHMASK = IN_CLOSE_WRITE|IN_CREATE|IN_DELETE|IN_MOVE|IN_DELETE_SELF;
#my $WATCHMASK = IN_ALL_EVENTS;
my %WatchList;
my %Mail;
my %Events;
sub wanted;
sub mywatch;
sub pathwatch;

my %options=();
getopts("c:v",\%options);

$CONFIGFILE = $options{c} if defined $options{c};
$DEBUG = 1 if defined $options{v};

my $config = XMLin($CONFIGFILE, ForceArray => ['path','watchlist']);

my $inotify = new Linux::Inotify2;
Event->io (fd => $inotify->fileno, poll => 'r', cb => sub { $inotify->poll });

foreach my $watchpoint (@{$config->{watchlist}}) {
  foreach my $path (@{$watchpoint->{path}}) {
    $WatchList{$path->{type}}{$path->{content}}{"contactpoint"} = $watchpoint->{contactpoint}->{email};
    $WatchList{$path->{type}}{$path->{content}}{"exec"} = $path->{exec} if(defined($path->{exec}));

    print "$path->{content} : $watchpoint->{contactpoint}->{email}\n" if($DEBUG);
    pathwatch($path->{type},$path->{content});
  }
}

$Mail{From} = $config->{guard}->{email};

Event::loop;

sub pathwatch {
  my ($mode,$path) = @_;
  if(-e "$path") {
    if($mode eq "single") {
      print "Watch $path\n" if($DEBUG);
      $inotify->watch ("$path", $WATCHMASK, \&mywatch);
    }
    elsif($mode eq "recursive") {
      File::Find::find({wanted => \&wanted}, "$path");
    }
  }
}

sub wanted {
  if(-d $File::Find::name) {
    print "Watch $File::Find::name\n" if($DEBUG);
    $inotify->watch ("$File::Find::name", $WATCHMASK, \&mywatch);
  }
}

sub getWatchList {
  my ($path) = @_;
  print "Path: $path\n" if($DEBUG);
  return undef if($WatchList{"exception"}{$path});
  foreach my $key (keys %{$WatchList{"exception"}}) {
    return undef if("$path" =~ /^$key/);
  }
  return $WatchList{"single"}{$path} if(defined $WatchList{"single"}{$path});
  return $WatchList{"recursive"}{$path} if(defined $WatchList{"recursive"}{$path});
  foreach my $key (keys %{$WatchList{"recursive"}}) {
    return $WatchList{"recursive"}{$key} if($path =~ /^$key/);
  }
  return undef;
}

sub mywatch {
  my $e = shift;
  my $filename = $e->fullname;
  printf ("events for <%s> received: %x\n", $filename, $e->mask) if($DEBUG);
  return if(defined $WatchList{"exception"}{$filename});
  my $Path = getWatchList($e->{w}->{name});
  return if(!defined($Path));
  undef $Mail{Message};
  if($e->IN_CREATE && -d $filename) {
    print "Dir $filename is watched\n" if($DEBUG);
    $inotify->watch ($filename, $WATCHMASK, \&mywatch);
  }
  elsif($e->IN_CLOSE_WRITE && -f $filename) {
    my $Message = "iWatch: $filename";
    $Mail{Message} = $Message;
    $Mail{Subject} = "iWatch:" . hostname() . ":Change:$filename";  
    print "to: $Path->{'contactpoint'} : $Message\n" if($DEBUG);
  }
  elsif($e->IN_DELETE) {
    my $Message = "";
    $Mail{Message} = $Message;
    $Mail{Subject} = "iWatch:" . hostname() . ":Delete:$filename";
    print "to: $Path->{'contactpoint'} : $Message\n" if($DEBUG);
  }
  elsif($e->IN_MOVED_FROM || $e->IN_MOVED_TO) {
    if($e->IN_MOVED_FROM) {
      $Events{$e->{cookie}} = "$filename";
    }
    elsif($e->IN_MOVED_TO) {
      my $FileMove = $Events{$e->{cookie}} . ":$filename";
      $Mail{Message} = "iWatch:$FileMove";
      $Mail{Subject} = "iWatch:" . hostname() . ":Move:$FileMove";
      print "to: $Path->{'contactpoint'} : Move from " . $Events{$e->{cookie}} . " to $filename\n" if($DEBUG);
      undef $Events{$e->{cookie}};
    }
  }
  elsif($e->IN_DELETE_SELF && -f $filename && defined $WatchList{$filename}) {
    print "rewatch: $filename\n" if($DEBUG);
    my $Message = "iWatch: $filename";
    $Mail{Message} = $Message;
    $Mail{Subject} = "iWatch:" . hostname() . ":Replaced:$filename";
    $inotify->watch ("$filename", $WATCHMASK, \&mywatch);
    print "to: $Path->{'contactpoint'} : $Message\n" if($DEBUG);
  }
  if(defined($Path->{exec})) {
    system ("$Path->{exec}");
  }
  if(defined($Mail{Message})) {
    $Mail{To} = $Path->{'contactpoint'};
    sendmail(%Mail) or warn $Mail::Sendmail::error;
  }
};

