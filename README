iWatch: Realtime filesystem monitor
By Cahya Wirawan <cahya at gmx dot at>.

iWatch is a realtime filesystem monitoring program. Its purpose is to monitor 
any changes in a specific directory or file and send email notification 
immediately after the change. This can be very useful to watch a sensible file 
or directory against any changes, like files /etc/passwd,/etc/shadow or 
directory /bin or to monitor the root directory of a website against 
any unwanted changes.

This application is written in Perl and need inotify support in Linux 
kernel >= 2.6.13. And it needs also following third party perl modules:
Linux::Inotify2, Event, Mail::Sendmail and XML::Simple. You can have 
all this modules from cpan as usual. 

iWatch can be executed in two modes, the first mode is daemon mode where you
can use an xml configuration file, and put a list of directories and files
(targets) to monitor. And the second mode is command line mode where you
can run it without a configuration file, you just need to put the necessary
informations (target to watch, email, exception, recursivity, events
to monitor and command to execute) in the command line. The options for 
both mode can't be mixed together.

In the xml configuration file, each targets can have each own email contact 
point. This contact point will get an email notification for any changes 
in the monitored targets. You can monitor a directory recursively, and you
can also setup a list of exceptions where you don't want to monitor 
directory/file inside a monitored directory. It is also possible to disable
email notification, and instead setup a command to be executed if an event
occurs. Per default iWatch only monitor following events:
close_write, create, delete, move, delete_self and move_self.
But you can specify any possible events, like access, attrib, modify
all_events and default.


How To Use:

In the daemon mode iWatch has following options:
Usage: iwatch [-d] [-f <config file>] [-v]
  -d Execute the application as daemon. iWatch will run in foregroud 
     without this option.
  -f Specify an alternate xml configuration file. Per default, iWatch will
     read /etc/iwatch.xml as it's configuration file.
  -v verbose mode.

In the command line mode iWatch has following options:
Usage: iwatch [-c command] [-e event[,event[,..]]] [-m email] [-r] [-w target] [-x exception] <target>
  Target is the directory or file you want to monitor.
  -c You can specify a command to be executed if an event occurs. And you can use
     following special string format in the command:
     %f Full path of the filename that gets an event.
     %p Program name (iWatch)
     %v Version number
  -e Events list. Following is the possible events you can use:
     * access - file was accessed
     * modify - file was modified
     * attrib - file attributes changed
     * close_write - file closed, after being opened in writeable mode
     * close_nowrite - file closed, after being opened in read-only mode
     * close - file closed, regardless of read/write mode
     * open - file was opened
     * moved_from - File was moved away from. 
     * moved_to - File was moved to.
     * move - a file/dir within watched directory was moved
     * create - a file was created within watched directory
     * delete - a file was deleted within watched directory
     * delete_self - the watched file was deleted
     * unmount - file system on which watched file exists was unmounted
     * q_overflow - Event queued overflowed
     * ignored - File was ignored
     * isdir - event occurred against dir
     * oneshot - only send event once
     * all_events - All events
     * default - close_write, create, delete, move, delete_self and move_self.
  -m Contact point's email address. Without this option, iwatch will not send 
     any email notification (obviously).
  -r Recursivity of the watched directory.
  -s Enable report to the syslog.
  -w The watched directory (Deprecated)
  -x The exception (file or directory).

example of config file: 

<config>
  <guard email="myadmin@localhost" name="IWatch"></guard>
  <watchlist>
    <title>Public Website</title>
    <contactpoint email="webmaster@localhost" name="Web Master"></contactpoint>
    <path type="single">/var/www/localhost/htdocs</path>
    <path type="single" syslog="on">/var/www/localhost/htdocs/About</path>
    <path type="recursive">/var/www/localhost/htdocs/Photos</path>
  </watchlist>
  <watchlist>
    <title>Operating System</title>
    <contactpoint email="admin@localhost" name="Administrator"></contactpoint>
    <path type="recursive">/etc/apache2</path>
    <path type="single">/etc/passwd</path>
    <path type="recursive">/etc/mail</path>
    <path type="exception">/etc/mail/statistics</path>
  </watchlist>
  <watchlist>
    <title>Only Test</title>
    <contactpoint email="root@localhost" name="Administrator"></contactpoint>
    <path type="single" alert="off" exec="(w;ps -ef)|mail -s %f root@localhost">/tmp/dir1</path>
    <path type="single" events="access,close" alert="off" exec="(w;ps -ef)|mail -s %f root@localhost">/tmp/dir2</path>
    <path type="single" events="default,access" alert="off" exec="(w;ps -ef)|mail -s '%f is accessed' root@localhost">/tmp/dir3</path>
    <path type="single" events="all_events" alert="off">/tmp/dir4</path>
  </watchlist>
</config>

With this configuration, iwatch will monitor a single directory 
/var/www/localhost/htdocs withouth it's sub directories, and any notification
will be sent to the contact point webmaster@localhost.
But it will monitor the whole directory tree of  /etc/apache2, including 
any sub directories created later after the IWatch is started.
You can use also exception here if you don't want to get notification for 
a file or subdirectory inside the monitored directory.

Example of the command line mode:

iwatch /tmp 
  monitor changes in /tmp direcotory with default events

iwatch -r -e access,create -m cahya@localhost -x /etc/mail /etc
  monitor only access and create events in /etc directory recursively
  with /etc/mail as exception and send email notification to cahya@localhost.

iwatch -r -c "(w;ps -ef)|mail -s '%f was changed' cahya@localhost" /bin
  monitor /bin directory recursively and execute the command.
